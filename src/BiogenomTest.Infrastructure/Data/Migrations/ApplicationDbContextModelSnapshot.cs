// <auto-generated />
using BiogenomTest.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BiogenomTest.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BiogenomTest.Domain.Entities.DailyIntake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<int>("NutrientId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NutrientId");

                    b.ToTable("DailyIntakes");
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.IntakeProjection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DailyIntakeId")
                        .HasColumnType("integer");

                    b.Property<double>("FromFood")
                        .HasColumnType("double precision");

                    b.Property<double>("FromSet")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DailyIntakeId")
                        .IsUnique();

                    b.ToTable("IntakeProjections");
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.Nutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Norm")
                        .HasColumnType("double precision");

                    b.Property<double?>("NormMax")
                        .HasColumnType("double precision");

                    b.Property<double?>("NormMin")
                        .HasColumnType("double precision");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Nutrients");
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.SupplementBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupplementBenefits");
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.SupplementProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TargetedNutrientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TargetedNutrientId");

                    b.ToTable("SupplementProducts");
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.DailyIntake", b =>
                {
                    b.HasOne("BiogenomTest.Domain.Entities.Nutrient", "Nutrient")
                        .WithMany("DailyIntakes")
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.IntakeProjection", b =>
                {
                    b.HasOne("BiogenomTest.Domain.Entities.DailyIntake", "DailyIntake")
                        .WithOne("Projection")
                        .HasForeignKey("BiogenomTest.Domain.Entities.IntakeProjection", "DailyIntakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyIntake");
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.SupplementProduct", b =>
                {
                    b.HasOne("BiogenomTest.Domain.Entities.Nutrient", "TargetedNutrient")
                        .WithMany("SupplementProducts")
                        .HasForeignKey("TargetedNutrientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TargetedNutrient");
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.DailyIntake", b =>
                {
                    b.Navigation("Projection");
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.Nutrient", b =>
                {
                    b.Navigation("DailyIntakes");

                    b.Navigation("SupplementProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
