// <auto-generated />
using BiogenomTest.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BiogenomTest.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250712042122_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BiogenomTest.Domain.Entities.DailyIntake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<int>("NutrientId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NutrientId");

                    b.ToTable("DailyIntakes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 7.04,
                            NutrientId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            Amount = 42.390000000000001,
                            NutrientId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1547.0699999999999,
                            NutrientId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            Amount = 225.59999999999999,
                            NutrientId = 4,
                            Status = 1
                        });
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.IntakeProjection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DailyIntakeId")
                        .HasColumnType("integer");

                    b.Property<double>("FromFood")
                        .HasColumnType("double precision");

                    b.Property<double>("FromSet")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DailyIntakeId")
                        .IsUnique();

                    b.ToTable("IntakeProjections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DailyIntakeId = 1,
                            FromFood = 0.0,
                            FromSet = 50.0
                        },
                        new
                        {
                            Id = 2,
                            DailyIntakeId = 2,
                            FromFood = 40.0,
                            FromSet = 330.0
                        });
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.Nutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Norm")
                        .HasColumnType("double precision");

                    b.Property<double?>("NormMax")
                        .HasColumnType("double precision");

                    b.Property<double?>("NormMin")
                        .HasColumnType("double precision");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Nutrients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vitamin D",
                            Norm = 15.0,
                            Unit = "mcg"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Vitamin C (ascorbic acid)",
                            Norm = 100.0,
                            Unit = "mg"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Water",
                            NormMax = 1900.0,
                            NormMin = 1800.0,
                            Unit = "g"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Protein",
                            Norm = 102.0,
                            Unit = "g"
                        });
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.SupplementBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupplementBenefits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Eliminate vitamin and mineral deficiency"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Improve the absorption of nutrients from food"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Compensate for an unbalanced diet"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Provide the body with vital elements"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Increase the functional reserves of the body"
                        });
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.SupplementProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TargetedNutrientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TargetedNutrientId");

                    b.ToTable("SupplementProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Advanced formula with vitamin D3 and K2",
                            ImageUrl = "images/vitamin-d.jpg",
                            Name = "Vitamin D3 Complex",
                            TargetedNutrientId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sustained-release vitamin C with bioflavonoids",
                            ImageUrl = "images/vitamin-c.jpg",
                            Name = "Premium Vitamin C",
                            TargetedNutrientId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Complete plant-based protein blend",
                            ImageUrl = "images/protein.jpg",
                            Name = "Protein Matrix",
                            TargetedNutrientId = 4
                        });
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.DailyIntake", b =>
                {
                    b.HasOne("BiogenomTest.Domain.Entities.Nutrient", "Nutrient")
                        .WithMany("DailyIntakes")
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.IntakeProjection", b =>
                {
                    b.HasOne("BiogenomTest.Domain.Entities.DailyIntake", "DailyIntake")
                        .WithOne("Projection")
                        .HasForeignKey("BiogenomTest.Domain.Entities.IntakeProjection", "DailyIntakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyIntake");
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.SupplementProduct", b =>
                {
                    b.HasOne("BiogenomTest.Domain.Entities.Nutrient", "TargetedNutrient")
                        .WithMany("SupplementProducts")
                        .HasForeignKey("TargetedNutrientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TargetedNutrient");
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.DailyIntake", b =>
                {
                    b.Navigation("Projection");
                });

            modelBuilder.Entity("BiogenomTest.Domain.Entities.Nutrient", b =>
                {
                    b.Navigation("DailyIntakes");

                    b.Navigation("SupplementProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
